<!--
    Together XPDL Model
    Copyright (C) 2011 Together Teamsolutions Co., Ltd.

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or 
    (at your option) any later version.
 
    This program is distributed in the hope that it will be useful, 
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the 
    GNU General Public License for more details.
 
    You should have received a copy of the GNU General Public License
    along with this program. If not, see http://www.gnu.org/licenses
-->
<!-- ======================================================================= -->
<!-- ANT-Makefile for TXM                                                    -->
<!-- ======================================================================= -->
<project name="TXM-doc" default="buildDoc" basedir=".">

	<!-- ==================================================================== -->
	<!-- Init target                                                          -->
	<!-- ==================================================================== -->
	<target name="init">

		<!--Set the global variables-->
		<property name="docbook.name" value="${app.name}-doc" />
		<property name="testcase.name" value="${app.name}-testcases-doc" />
		<property name="doc.title" value="${app.full.name}" />
		<property name="version" value="1.0" />
		<property name="release" value="1" />

		<property name="project.name" value="TXM" />
		<!--property name="app.name" value="txm" /-->

		<!-- Operating system  -->
		<condition property="os" value="windows">
			<os family="windows" />
		</condition>
		<condition property="os" value="unix">
			<os family="unix" />
		</condition>

		<condition property="path.separator" value=";">
			<os family="windows" />
		</condition>
		<condition property="path.separator" value=":">
			<os family="unix" />
		</condition>

		<condition property="executable.extension" value=".exe">
			<os family="windows" />
		</condition>
		<condition property="executable.extension" value="">
			<os family="unix" />
		</condition>

		<!-- Set directories -->
		<property name="project.dir" location="${basedir}/.." />
		<property name="doc.dir" location="${basedir}" />
		<property name="tmp.dir" location="${basedir}/tmp" />
		<property name="sources.dir" location="${project.dir}/src" />

		<property name="docbook.xsl.dir" location="${tools.dir}/docbook-xsl" />
		<property name="ant.lib.dir" location="${tools.dir}/ant" />
		<property name="fop.lib.dir" location="${tools.dir}/fop" />
		<property name="xalan.lib.dir" location="${tools.dir}/xalan" />

		<!--Set the main classpath-->
		<path id="classpath">
			<pathelement location="${tools.dir}/xerces/xercesImpl.jar" />
			<pathelement location="${tools.dir}/xml-commons/xml-apis.jar" />
		</path>

		<!--Set the classpath for docbook-->
		<path id="xalan-classpath">
			<fileset dir="${xalan.lib.dir}">
				<include name="*.jar" />
			</fileset>
		</path>

		<path id="fop-classpath">
			<fileset dir="${tools.dir}/avalon-framework">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${tools.dir}/batik">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${tools.dir}/commons-io">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${tools.dir}/commons-logging">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${tools.dir}/fop">
				<include name="**/*.jar" />
			</fileset>
			<fileset dir="${tools.dir}/xmlgraphics-commons">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<property name="docbook.fo.xsl" location="${tools.dir}/docbook-xsl-fo/docbookx.xsl" />
		<property name="docbook.pdf.classpath" location="${fop.lib.dir}/fop.jar${path.separator}${tools.dir}/batik/batik.jar${path.separator}${tools.dir}/avalon-framework/avalon-framework.jar${path.separator}${tools.dir}/commons-io/commons-io.jar${path.separator}${tools.dir}/xmlgraphics-commons/xmlgraphics-commons.jar${path.separator}${tools.dir}/commons-logging/commons-logging.jar" />

		<!-- Setting IF task -->
		<taskdef name="if" classname="net.sf.antcontrib.logic.IfTask">
			<classpath>
				<fileset dir="${tools.dir}/antcontrib">
					<include name="antcontrib.jar" />
				</fileset>
			</classpath>
		</taskdef>
		<!-- Setting FOP task -->
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<fileset dir="${fop.lib.dir}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${tools.dir}/commons-logging">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</taskdef>
	</target>

	<!-- ==================================================================== -->
	<!-- Prepare output                                                       -->
	<!-- ==================================================================== -->
	<target name="prepare" depends="init">
		<mkdir dir="${output.doc.dir}" />
		<mkdir dir="${tmp.dir}" />
	</target>

	<!-- ==================================================================== -->
	<!-- Content output                                                       -->
	<!-- ==================================================================== -->
	<target name="content" depends="prepare">
		<copy todir="${tmp.dir}/images">
			<fileset dir="${doc.dir}/images" />
		</copy>
		<copy todir="${tmp.dir}/images/templates">
			<fileset dir="${tools.dir}/tds" includes="*.jpg" />
		</copy>
		<copy todir="${tmp.dir}">
			<fileset dir="" includes="*-doc.xml" excludes="*-testcases-doc.xml" />
			<filterset>
				<filter token="COPYRIGHT" value="${copyright.year}" />
			</filterset>
			<mapper type="glob" from="*.xml" to="${docbook.name}.xml"/>
		</copy>
		<copy todir="${tmp.dir}">
			<fileset dir="" includes="*-testcases-doc.xml" />
			<filterset>
				<filter token="COPYRIGHT" value="${copyright.year}" />
			</filterset>
			<mapper type="glob" from="*.xml" to="${testcase.name}.xml"/>
		</copy>
		<!--copy file="${doc.dir}/${testcase.name}.xml" tofile="${tmp.dir}/${testcase.name}.xml" /-->
		
		<copy todir="${tmp.dir}">
			<fileset dir="${tools.dir}/fop-resources/">
				<include name="**" />
				<exclude name="*.properties" />
				<exclude name="*.txt" />
			</fileset>
		</copy>
		
		<replace file="${tmp.dir}/${docbook.name}.xml" encoding="utf-8" token="../tools/docbook-dtd/dtd/docbook.dtd" value="../../tools/docbook-dtd/dtd/docbook.dtd" />
		<replace file="${tmp.dir}/${testcase.name}.xml" encoding="utf-8" token="../tools/docbook-dtd/dtd/docbook.dtd" value="../../tools/docbook-dtd/dtd/docbook.dtd" />
	</target>

	<!-- ==================================================================== -->
	<!-- Create java API - javadoc                                            -->
	<!-- ==================================================================== -->
	<target name="javadoc" depends="prepare">
		<mkdir dir="${output.doc.dir}/api" />
		<!--Create Javadoc-->
		<property name="doctitle" value="${project.name} - Together XPDL Model ${version}-${release} API" />
		<property name="header" value="${project.name} ${version}-${release} API" />
		<javadoc sourcepath="${sources.dir}" destdir="${output.doc.dir}/api" classpathref="classpath" packagenames="org.enhydra.jxpdl.*" doctitle="${doctitle}" windowtitle="${doctitle}" header="${header}" splitindex="yes" access="private" encoding="ISO-8859-1" failonerror="true" additionalparam="-J-Xmx128m -breakiterator -quiet" />
	</target>

	<target name="docbook.check">
		<uptodate property="docbook.notRequired" targetfile="${tmp.dir}/${app.name}-current.doc.pdf">
			<srcfiles dir="${doc.dir}" includes="${docbook.name}.xml" />
		</uptodate>
	</target>

	<!-- ==================================================================== -->
	<!-- DocBook Documentation                                                -->
	<!-- ==================================================================== -->
	<target name="docbook" depends="prepareDocbook">
		<copy todir="${output.doc.dir}">
			<fileset dir="${tmp.dir}">
				<include name="**/images/**" />
				<include name="*.pdf" />
				<include name="${app.name}-current.doc.html" />
			</fileset>
		</copy>
		<copy file="${docbook.xsl.dir}/css/html.css" todir="${output.doc.dir}" />
	</target>

	<target name="prepareDocbook" depends="content, docbook.check" unless="docbook.notRequired">
		<echo message="compile docbook with docbook.xsl" />
		<java classname="org.apache.xalan.xslt.Process" classpathref="xalan-classpath" fork="true" failonerror="true" dir="${tmp.dir}">
			<arg line="-param html.stylesheet html.css" />
			<arg line="-param ignore.image.scaling 1" />
			<arg line="-xsl '${tools.dir}/docbook-xsl/xsl/html/docbook.xsl'" />
			<arg line="-in '${docbook.name}.xml'" />
			<arg line="-out '${app.name}-current.doc.html'" />
		</java>

		<echo message="docbook to ${docbook.name}.fo" />
		<java classname="org.apache.xalan.xslt.Process" classpathref="xalan-classpath" fork="true" failonerror="true" dir="${tmp.dir}">
			<arg line="-param section.autolabel 1" />
			<arg line="-param section.label.includes.component.label 1 " />
			<arg line="-param section.autolabel.max.depth 8" />
			<arg line="-param html.stylesheet html.css" />
			<arg line="-param body.start.indent 0pt" />
			<arg line="-param ulink.footnotes 1" />
			<arg line="-param paper.type A4" />
			<arg line="-xsl '${docbook.fo.xsl}'" />
			<arg line="-in '${docbook.name}.xml'" />
			<arg line="-out '${docbook.name}.fo'" />
		</java>

		<!--ADD-->
		<replace file="${tmp.dir}/${docbook.name}.fo" encoding="utf-8" token="@doctitle@" value="${doc.title}" />
		<replace file="${tmp.dir}/${docbook.name}.fo" encoding="utf-8" token="@buildid@" value="Version: ${version}-${release} - ${build.timestamp}" />
		<!--/ADD-->

		<echo message="docbook to PDF ${tmp.dir}/${docbook.name}.xml" />
		<java classname="org.apache.fop.cli.Main" classpathref="fop-classpath" fork="true" dir="${tmp.dir}" output="log.txt">
			<arg line="-c userconfig.xml" />
			<arg line="-fo '${docbook.name}.fo'" />
			<arg line="-pdf '${app.name}-current.doc.pdf'" />
		</java>

		<delete file="${tmp.dir}/${docbook.name}.fo" quiet="true" />
		<delete file="${tmp.dir}/${docbook.name}.xml" quiet="true" />

		<echo message="docbook to ${testcase.name}.fo" />
		<java classname="org.apache.xalan.xslt.Process" classpathref="xalan-classpath" fork="true" failonerror="true" dir="${tmp.dir}">
			<arg line="-param section.autolabel 1" />
			<arg line="-param section.label.includes.component.label 1 " />
			<arg line="-param section.autolabel.max.depth 8" />
			<arg line="-param html.stylesheet html.css" />
			<arg line="-param body.start.indent 0pt" />
			<arg line="-param ulink.footnotes 1" />
			<arg line="-param paper.type A4" />
			<arg line="-xsl '${docbook.fo.xsl}'" />
			<arg line="-in '${testcase.name}.xml'" />
			<arg line="-out '${testcase.name}.fo'" />
		</java>

		<!--ADD-->
		<replace file="${tmp.dir}/${testcase.name}.fo" encoding="utf-8" token="@doctitle@" value="${doc.title}" />
		<replace file="${tmp.dir}/${testcase.name}.fo" encoding="utf-8" token="@buildid@" value="Version: ${version}-${release} - ${build.timestamp}" />
		<!--/ADD-->

		<echo message="docbook to PDF ${tmp.dir}/${testcase.name}.xml" />
		<java classname="org.apache.fop.cli.Main" classpathref="fop-classpath" fork="true" failonerror="true" dir="${tmp.dir}" output="log.txt">
			<arg line="-c userconfig.xml" />
			<arg line="-fo '${testcase.name}.fo'" />
			<arg line="-pdf '${app.name}-current.test.pdf'" />
		</java>

		<delete file="${tmp.dir}/${testcase.name}.fo" quiet="true" />
		<delete file="${tmp.dir}/${testcase.name}.xml" quiet="true" />

	</target>

	<target name="generate-pdf" description="Generates a single PDF file">
		<fop format="application/pdf" fofile="${tmp.dir}/${docbook.name}.fo" outfile="${tmp.dir}/${app.name}-current.doc.pdf" logfiles="log.txt" />
	</target>

	<!-- ==================================================================== -->
	<!-- Documentation output                                                 -->
	<!-- ==================================================================== -->
	<target name="buildDoc" depends="init">
		<echo message="Documentation Build" />
		<ant target="javadoc" />
		<ant target="docbook" />
	</target>

	<!-- ==================================================================== -->
	<!-- DocBook Documentation output                                         -->
	<!-- ==================================================================== -->
	<target name="buildDocBook" depends="init">
		<echo message="Documentation Build" />
		<ant target="docbook" />
	</target>

	<!-- ==================================================================== -->
	<!-- Cleans everything                                                    -->
	<!-- ==================================================================== -->
	<target name="clean" depends="init">
		<delete dir="${output.doc.dir}" />
		<delete>
			<fileset dir="${basedir}" includes="log.txt,${docbook.name}.xml~,${testcase.name}.xml~" defaultexcludes="false" />
		</delete>
		<delete dir="${basedir}/tmp" />
	</target>

</project>

